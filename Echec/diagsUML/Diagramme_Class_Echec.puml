@startuml
'https://plantuml.com/class-diagram


Package Controller
{
    class Facade
    {
        -echec : Echec
        -playerWhite : Joueur
        -playerBlack : Joueur
        -pieceSelectionee : Piece
        -mouvementPossible : Boolean[][]
        +Facade(echec1 : Echec, initplayer1 : Joueur, initplayer2 : Joueur)
        +pieceSelectionneMouvement(x Integer,y Integer)
        +creationPartie()
        +PionPromotion(name : String)
    }
}
Package model
{
    interface EchecObserver
    {
            +updateMouvementPossible()
            +updateMouvement()
            +updateScore(score : Integer, couleur : Couleur)
            +updatePromotionPion(x : Integer, y : Integer)
            +updateEchec(roix : Integer, roiy : Integer, attaquantx : Integer, attaquanty : Integer)
            +updateEchecMath(couleur : Couleur))
    }

    class Echec {
    -{static}echecquier : Piece[][]
    -{static}observers : ArrayList<EchecObserver>
    -couleur Couleur;
    -{static}pieceFactory : PieceFactory
    -playerWhite : Joueur
    -playerBlack : Joueur
    -NomPieceProm : String
    -updateScore(score : Integer)
    +Echec(initPlayer1 Joueur, initPlayer2 Joueur)
    +updateEchec(roix Integer, roiy Integer, attaquantx Integer, attaquanty Integer)
    +getEchecquier() : Piece[][]
    +getCouleur() : Couleur
    +addObserveur(echecObserver : EchecObserver)
    +updateMouvement()
    +updateMouvementPossible(envoie Boolean[][])
    +updateEchecMath(couleur Couleur)
    +updatePromotionPion(x Integer, y Integer)
    +FintourJoueur()
    +mouvement(pieceSelectionex Integer, pieceSelectioney Integer, newEmplacementx Integer, newEmplacementy Integer)
    +PromotionPion(pion : Piece)
    +pionPromu(name : String))
    +verifEchec(tempEchequier Piece[][], couleur Couleur) : Boolean
    +verifEchecMath(piecesAttaquant List<Piece>) : Boolean
    +setPiece(piece : Piece, x : Integer, y : Integer)
    +getPiece(tempEchequier : Piece[][], x : Integer, y : Integer)
    +dupliqueEchequier(tempEchequier Piece[][])
    +creationPartie()
    +calculmouvementPossible(x Integer y Integer) : Boolean[]
    +searchMouvementpossibleEchec(mouvementPossible Boolean[][])
    }
    class pieceFactory
    {
        +createPion() : piece Piece
        +createCavalier() : piece Piece
        +createFou() : piece Piece
        +createTour() : piece Piece
        +createDame() : piece Piece
        +createRoi() : piece Piece
    }
    abstract class Piece
    {
        -x : Integer
        -y : Integer
        -not_play : Integer
        -color : Couleur
        -switch_color : Integer
        -score : Integer
        +Piece(color1 Couleur)
        +getScore() : Integer
        +{abstract} calculmouvementPossible(echec Echec) : Map<Integer, Integer[]>
        +searchPieceDifferentColorOrNull(echequier Piece[][], search_x Integer, search_y Integer) : boolean
        +getColor()
        +setXY(init_x Integer, init_y Integer)
        +getX() : Integer
        +getY() : Integer
        +setNot_play(not_play boolean)
        +getNot_play() : boolean
        +clonee() : Piece
    }
    class Pion extends Piece
    {
        +Pion(color Color)
        +calculmouvementPossible(echec Echec) : Map<Integer, Integer[]>
    }
    class Cavalier extends Piece
    {
        +{static}Cavalier(color Color)
        +calculmouvementPossible(echec Echec) : Map<Integer, Integer[]>
    }
    class Fou extends Piece
    {
        +{static}Fou(color Color)
        +calculmouvementPossible(echec Echec) : Map<Integer, Integer[]>
    }
    class Tour extends Piece
    {
    +{static}Tour(color Color)
    +calculmouvementPossible(echec Echec) : Map<Integer, Integer[]>
    }
    class Dame extends Piece
    {
        +{static}Dame(color Color)
        +calculmouvementPossible(echec Echec) : Map<Integer, Integer[]>
    }
    class Roi extends Piece
    {
        +{static}Roi(color Color)
        +calculmouvementPossible(echec Echec) : Map<Integer, Integer[]>
    }
    Enum Couleur
    {
        WHITE
        BLACK
    }

    class Joueur
    {
     -nom : String
     -score : Integer
     -color : Couleur
     -roi : Piece
     +Joueur(color1 : Couleur)
     +setNom(init_nom : String)
     +getNom() : String
     +setScore(score1 : Integer)
     +setColor(color Couleur)
     +addScore(score1 : Integer)
     +addtoScore(value : Integer)
     +getScore() : Integer
     +getRoi() : Piece
     +getColor() : Couleur
     +setRoi(roi : Piece)
    }
}
Package view{

    class EchecWindow implements EchecObserver
    {
     -{static}Echecquier : Button_piece[][]
     -FicheJeu : JPanel
     -FichePromotion : JPanel
     -FicheStart : JPanel
     -FicheEnd : JPanel
     -scoreBlack : JLabel
     -scoreWhite : JLabel
     -joueurWhite : Joueur
     -joueurBlack : Joueur
     -facade : Facade
     -decisionPion : boolean
     -boutonPromotion(name : String)) : Button_piece
     -startFicheStart()
     -startEchec(white : Joueur, black : Joueur)
     -creationFicheStart()
     -creationFicheEnd(vainqueur : Joueur)
     -creationEchec(white : Joueur, black : Joueur)
     -createJoueur(joueur : Joueur)
     -CreationPannelPromotion()
     -backgroundEchequierBlackWhite()
     -cleanBord()
     +EchecWindow(facade1 : Facade, joueur1 : Joueur , joueur2 : Joueur)
     +updateMouvementPossible(mouvementPossible : Boolean[][])
     +updateMouvement(echecquier : Piece[][])
     +updateEchec(roix Integer, roiy Integer, attaquantx Integer, attaquanty Integer)
     +updateEchecMath(couleur Couleur)
     +updatePromotionPion(x Integer, y Integer)
     +updateScore(score : Integer, couleur : Couleur)
    }

    class Button_piece
    {
        -x : Integer
        -y : Integer
        -name : String
        +Button_piece(x1 : Integer, y1 : Integer)
        +Button_piece(name1 : String, couleur : Couleur)
        +recupX() : Integer
        +recupY() : Integer
        +recupName() : String
        +metName(name1 : String, couleur : Couleur)
        +placeImage(couleur : Couleur)
    }

}
Piece *--> "1\n- color" Couleur : > A pour couleur
Joueur *--> "1 color" Couleur : > A pour couleur
Joueur *--> "1 color" Roi : > A pour roi
Echec *--> "-64" Piece : > A besoin
Echec *--> "2" Joueur : > A besoin

Echec ..> pieceFactory : > <<use>>

pieceFactory ...> Piece : > <<use>>
pieceFactory ..> Roi : > <<use>>
pieceFactory ..> Pion : > <<use>>
pieceFactory ..> Cavalier : > <<use>>
pieceFactory ..> Fou : > <<use>>
pieceFactory ..> Dame : > <<use>>
pieceFactory ..> Tour : > <<use>>


EchecObserver <--o Echec : > Consult
Facade --> Echec : > Manipule
Facade ..> EchecWindow : > Selectionne
EchecWindow --> Facade : > Transmet_Demandes
EchecWindow *--> "-64" Button_piece : > A besoin

@enduml