@startuml
'https://plantuml.com/class-diagram


Package view{
    interface EchecObserver
    {
        +updateMouvementPossible()
        +updateMouvement()
        +updateEchec()
    }
    class EchecWindow implements EchecObserver
    {
     +EchecWindow()
     +gameStart()
     +GgmeFinish()
    }

}
Package Controller
{
    class Facade
    {
        -String player1
        -String player2
    }
}
Package model
{
    class Echec {
    +FintourJoueur(color Color)
    +mouvement(position int[])
    -verifEchec(color Color) : echec Boolean
    -verifEchecMath(color Color) : echec Boolean
    }
    Interface pieceFactory
    {
        +PieceFactory()
        +createPion() : piece Piece
        +createCavalier() : piece Piece
        +createFou() : piece Piece
        +createTour() : piece Piece
        +createDame() : piece Piece
        +createRoi() : piece Piece
    }
    abstract class Piece
    {
        +mouvementPossibles List<int[]>
        +getcolor()
        +capturePiece()
        +CalculmouvementPossible(piece Piece, Echecquier Piece[]) : Piece[]
    }
    class Pion extends Piece
    {
        +{static}Pion(color Color)
        +promotion()
        +CalculmouvementPossible(piece Piece, Echecquier Piece[]) : Piece[]
    }
    class Cavalier extends Piece
    {
    +{static}Cavalier(color Color)
    +CalculmouvementPossible(piece Piece, Echecquier Piece[]) : Piece[]
    }
    class Fou extends Piece
    {
    +{static}Fou(color Color)
    +CalculmouvementPossible(piece Piece, Echecquier Piece[]) : Piece[]
    }
    class Tour extends Piece
    {
    +{static}Tour(color Color)
    +CalculmouvementPossible(piece Piece, Echecquier Piece[]) : Piece[]
    }
    class Dame extends Piece
    {
    +{static}Dame(color Color)
    +CalculmouvementPossible(piece Piece, Echecquier Piece[]) : Piece[]
    }
    class Roi extends Piece
    {
    +{static}Roi(color Color)
    +CalculmouvementPossible(piece Piece, Echecquier Piece[]) : Piece[]
    }
    Enum Color
    {
        WHITE
        BLACK
    }
}

Piece *--> "1\n- color" Color : > A pour couleur
Echec *--> "-64" Piece : > A besoin
Echec *-----> "-1" Piece : > Selectionnez

Echec ..> pieceFactory : > <<use>>

pieceFactory ...> Piece : > <<use>>
pieceFactory ..> Roi : > <<use>>
pieceFactory ..> Pion : > <<use>>
pieceFactory ..> Cavalier : > <<use>>
pieceFactory ..> Fou : > <<use>>
pieceFactory ..> Dame : > <<use>>
pieceFactory ..> Tour : > <<use>>


EchecObserver <--o Echec : > Consult
Facade --> Echec : > Manipule
Facade ..> EchecWindow : > Selectionne
EchecWindow --> Facade : > Transmet_Demandes

@enduml